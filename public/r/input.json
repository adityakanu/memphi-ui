{
  "name": "input",
  "type": "registry:ui",
  "files": [
    {
      "type": "registry:ui",
      "content": "import { cn } from \"@/lib/utils\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nconst inputVariants = cva(\n  [\n    // Base styles\n    \"flex h-10 w-full rounded-md border-2 border-black bg-white px-3 py-2\",\n    \"text-sm text-black placeholder:text-gray-500\",\n    \"transition-all duration-200 ease-in-out\",\n    \"disabled:cursor-not-allowed disabled:opacity-50\",\n    \"file:border-0 file:bg-transparent file:text-sm file:font-medium\",\n    // Focus styles with dotted border\n    \"focus:outline-none focus:border-dashed focus:border-2\",\n    // Invalid styles\n    \"aria-invalid:border-red-500\"\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"border-black\",\n        destructive: \"border-red-500\",\n        success: \"border-green-500\",\n        warning: \"border-yellow-500\",\n      },\n      size: {\n        sm: \"h-8 px-2 text-xs\",\n        default: \"h-10 px-3 text-sm\",\n        lg: \"h-12 px-4 text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\">,\n    VariantProps<typeof inputVariants> {\n  shadowColor?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, variant, size, shadowColor, style, ...props }, ref) => {\n    const hasShadow = Boolean(shadowColor)\n    \n    const shadowStyle = hasShadow\n      ? {\n          boxShadow: `4px 4px 0px 0px ${shadowColor}`,\n          ...style,\n        }\n      : style\n\n    const shadowClasses = hasShadow\n      ? [\n          // Shadow container positioning\n          \"relative\",\n          // Focus state with shadow - border becomes dotted but shadow border stays solid\n          \"focus:translate-x-[2px] focus:translate-y-[2px]\",\n          // Add pseudo-element for the shadow that stays solid\n          \"before:absolute before:inset-0 before:rounded-md before:border-2 before:border-black before:bg-transparent\",\n          \"before:translate-x-[4px] before:translate-y-[4px] before:-z-10\",\n          \"before:transition-all before:duration-200\",\n          \"focus:before:translate-x-[2px] focus:before:translate-y-[2px]\",\n        ]\n      : []\n\n    return (\n      <div className={cn(hasShadow && \"relative inline-block\")}>\n        <input\n          className={cn(\n            inputVariants({ variant, size }),\n            ...shadowClasses,\n            className\n          )}\n          style={shadowStyle}\n          ref={ref}\n          {...props}\n        />\n      </div>\n    )\n  }\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, inputVariants }\n",
      "path": "ui/input.tsx",
      "target": "components/memphi/ui/input.tsx"
    }
  ]
}